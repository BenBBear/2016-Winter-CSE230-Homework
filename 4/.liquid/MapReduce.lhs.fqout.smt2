(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)
(set-option :smt.mbqi false)
(define-sort SMT_Elt () Int)
(define-sort SMT_Set () (Array SMT_Elt Bool))
(define-fun smt_set_emp () SMT_Set ((as const SMT_Set) false))
(define-fun smt_set_mem ((x SMT_Elt) (s SMT_Set)) Bool (select s x))
(define-fun smt_set_add ((s SMT_Set) (x SMT_Elt)) SMT_Set (store s x true))
(define-fun smt_set_cup ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s SMT_Set)) SMT_Set ((_ map not) s))
(define-fun smt_set_dif ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 SMT_Set) (s2 SMT_Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort SMT_Map () (Array SMT_Elt SMT_Elt))
(define-fun smt_map_sel ((m SMT_Map) (k SMT_Elt)) SMT_Elt (select m k))
(define-fun smt_map_sto ((m SMT_Map) (k SMT_Elt) (v SMT_Elt)) SMT_Map (store m k v))
(declare-fun z3v60 () Int)
(declare-fun z3f61 (Int) Int)
(declare-fun z3v62 () Int)
(declare-fun z3v63 () Int)
(declare-fun z3v64 () Int)
(declare-fun z3f65 (Int) Int)
(push 1)
(assert (<= 0 (z3f65 z3v64)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(declare-fun z3v66 () Int)
(declare-fun z3f67 (Int) Int)
(declare-fun z3v68 () Int)
(push 1)
(assert (not (= z3v68 (z3f67 z3v66))))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(declare-fun z3v69 () Int)
(declare-fun z3f70 (Int) Int)
(declare-fun z3v71 () Int)
(push 1)
(assert (not (= z3v71 (z3f70 z3v69))))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v64)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(declare-fun z3v72 () Int)
(declare-fun z3f73 (Int) Int)
(declare-fun z3v74 () Int)
(push 1)
(assert (not (= z3v74 (z3f73 z3v72))))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(declare-fun z3v75 () Int)
(declare-fun z3f76 (Int) Int)
(declare-fun z3v77 () Int)
(push 1)
(assert (not (= z3v77 (z3f76 z3v75))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v78 () Int)
(declare-fun z3v79 () Int)
(declare-fun z3v80 () Int)
(push 1)
(assert (= z3v80 z3v78))
(assert (= z3v79 z3v78))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(push 1)
(assert (not (not (= z3v80 z3v78))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v80 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v80 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v80 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v80 z3v78)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v81 () Int)
(declare-fun z3v82 () Int)
(declare-fun z3v83 () Int)
(declare-fun z3v84 () Int)
(declare-fun z3v85 () Int)
(declare-fun z3f86 (Int) Int)
(declare-fun z3v87 () Int)
(declare-fun z3f88 (Int) Int)
(declare-fun z3f89 (Int) Int)
(declare-fun z3f90 (Int) Int)
(declare-fun z3f91 (Int Int) Int)
(declare-fun z3v92 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v92)))
(assert (= z3v92 z3v81))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v82)))
(assert (= z3v82 z3v81))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(push 1)
(assert (not (not (= z3v92 z3v81))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v92 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v92 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v92 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v92 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  (z3f65 z3v92) 0)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v93 () Int)
(declare-fun z3v94 () Int)
(declare-fun z3v95 () Int)
(declare-fun z3v96 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v96)))
(assert (= z3v96 z3v94))
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (<= 0 (z3f65 z3v95)))
(assert (= z3v95 z3v94))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (= z3v93 z3v81))
(assert (<= z3v93 z3v81))
(assert (>= z3v93 z3v81))
(push 1)
(assert (not (= z3v96 z3v93)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v96 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v96 z3v93))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v96 z3v81))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v96 z3v94))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v96 z3v93)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v96 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v96 z3v94)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v96 z3v93)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v96 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v96 z3v94)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v96 z3v93)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v96 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v96 z3v94)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v96 z3v93)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v96 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v96 z3v94)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  (z3f65 z3v96) 0)))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (= z3v93 z3v81))
(assert (<= z3v93 z3v81))
(assert (>= z3v93 z3v81))
(declare-fun z3v97 () Int)
(declare-fun z3v98 () Int)
(push 1)
(assert (not (= z3v98 z3v97)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v98 z3v97))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v98 z3v97)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v98 z3v97)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v98 z3v97)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v98 z3v97)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v99 () Int)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (= z3v99 z3v78))
(assert (<= z3v99 z3v78))
(assert (>= z3v99 z3v78))
(declare-fun z3v100 () Int)
(push 1)
(assert (not (>= z3v100 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v100 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v100 z3v78)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v101 () Int)
(declare-fun z3v102 () Int)
(declare-fun z3v103 () Int)
(declare-fun z3v104 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v104)))
(assert (>  (z3f65 z3v104) 0))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v101)))
(assert (= z3v103 z3v102))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v101) 0))
(push 1)
(assert (not (>= z3v104 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v104 z3v81)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v104 z3v81)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v105 () Int)
(declare-fun z3v106 () Int)
(declare-fun z3v107 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v107)))
(assert (>  (z3f65 z3v107) 0))
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (<= 0 (z3f65 z3v105)))
(assert (= z3v106 z3v102))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v105) 0))
(push 1)
(assert (not (>= z3v107 z3v94)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v107 z3v94)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v107 z3v81))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v107 z3v93))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v107 z3v94)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v108 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v108)))
(assert (= z3v108 z3v94))
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (<= 0 (z3f65 z3v95)))
(assert (= z3v95 z3v94))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(push 1)
(assert (not (not (= z3v108 z3v81))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  (z3f65 z3v108) 0)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v109 () Int)
(declare-fun z3v110 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v110)))
(assert (>  (z3f65 z3v110) 0))
(assert (<= 0 (z3f65 z3v109)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v109) 0))
(push 1)
(assert (not (>  (z3f65 z3v110) 0)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v111 () Int)
(declare-fun z3v112 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v112)))
(assert (>  (z3f65 z3v112) 0))
(assert (<= 0 (z3f65 z3v111)))
(assert (>  (z3f65 z3v111) 0))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(push 1)
(assert (not (>  (z3f65 z3v112) 0)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v113 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v113)))
(assert (= z3v113 z3v81))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v82)))
(assert (= z3v82 z3v81))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(declare-fun z3v114 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v114)))
(assert (>  (z3f65 z3v114) 0))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v101)))
(assert (= z3v103 z3v102))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v101) 0))
(pop 1)
(declare-fun z3v115 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v115)))
(assert (= z3v115 z3v94))
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (<= 0 (z3f65 z3v95)))
(assert (= z3v95 z3v94))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(push 1)
(assert (not (and (not (= z3v115 z3v81)) (>  (z3f65 z3v115) 0))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v116 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v116)))
(assert (>  (z3f65 z3v116) 0))
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (<= 0 (z3f65 z3v105)))
(assert (= z3v106 z3v102))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v105) 0))
(push 1)
(assert (not (and (not (= z3v116 z3v81)) (>  (z3f65 z3v116) 0))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v117 () Int)
(declare-fun z3v118 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v118)))
(assert (>  (z3f65 z3v118) 0))
(assert (not (= z3v118 z3v81)))
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (<= 0 (z3f65 z3v117)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v117) 0))
(assert (not (= z3v117 z3v81)))
(push 1)
(assert (not (>  (z3f65 z3v118) 0)))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v93)))
(assert (<= 0 (z3f65 z3v81)))
(assert (= (z3f65 z3v81) 0))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 (z3f91 z3v87 z3v85)))
(assert (= (z3f90 z3v84) z3v87))
(assert (= (z3f89 z3v84) z3v85))
(assert (= (z3f88 z3v84) z3v87))
(assert (= (z3f86 z3v84) z3v85))
(assert (= z3v84 z3v83))
(assert (<= 0 (z3f65 z3v94)))
(assert (= (z3f65 z3v94) (+ 1 (z3f65 z3v93))))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(declare-fun z3v119 () Int)
(declare-fun z3v120 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v120)))
(assert (>  (z3f65 z3v120) 0))
(assert (<= 0 (z3f65 z3v119)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v119) 0))
(push 1)
(assert (not (>  (z3f65 z3v120) 0)))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(declare-fun z3v121 () Int)
(declare-fun z3v122 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v122)))
(assert (>  (z3f65 z3v122) 0))
(assert (<= 0 (z3f65 z3v121)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v121) 0))
(push 1)
(assert (not (>  (z3f65 z3v122) 0)))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(declare-fun z3v123 () Int)
(declare-fun z3v124 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v124)))
(assert false)
(assert (<= 0 (z3f65 z3v123)))
(assert (= z3v79 z3v78))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert false)
(push 1)
(assert (not (>  (z3f65 z3v124) 0)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v125 () Int)
(push 1)
(assert (= z3v125 z3v78))
(assert (= z3v79 z3v78))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(declare-fun z3v126 () Int)
(declare-fun z3v127 () Int)
(declare-fun z3v128 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v128)))
(assert (>  (z3f65 z3v128) 0))
(assert (<= 0 (z3f65 z3v127)))
(assert (<= 0 (z3f65 z3v126)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(assert (>  (z3f65 z3v126) 0))
(push 1)
(assert (not (>  (z3f65 z3v128) 0)))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v64)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v64)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v64)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(push 1)
(assert (<= 0 (z3f65 z3v64)))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(pop 1)
(declare-fun z3v129 () Int)
(declare-fun z3v130 () Int)
(declare-fun z3v131 () Int)
(declare-fun z3v132 () Int)
(declare-fun z3v133 () Int)
(declare-fun z3v134 () Int)
(push 1)
(assert (<= 0 (z3f65 z3v134)))
(assert (>  (z3f65 z3v134) 0))
(assert (<= 0 (z3f65 z3v133)))
(assert (<= 0 (z3f65 z3v132)))
(assert (<= 0 (z3f65 z3v131)))
(assert (>  (z3f65 z3v131) 0))
(assert (= z3v130 z3v129))
(assert (= (z3f61 z3v63) z3v63))
(assert (= (z3f61 z3v62) z3v62))
(assert (= (z3f61 z3v60) z3v60))
(push 1)
(assert (not (>  (z3f65 z3v134) 0)))
(check-sat)
(pop 1)
(pop 1)
