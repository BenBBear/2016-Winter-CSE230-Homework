96:1-96:9::distance :: "x1:{v : Int | v > 0} -> {v : (List Double) | size v == x1} -> {v : (List Double) | size v == x1} -> Double"
96:10-96:11::n :: "{v : Int | v > 0}"
96:12-96:14::px :: "{v : (List Double) | size v == n}"
96:15-96:17::py :: "{v : (List Double) | size v == n}"
96:20-96:24::lq_anf__d2rE :: "Double -> Double"
96:27-96:36::_ :: "Double -> (List Double) -> Double"
96:33-96:36::lq_anf__d2rF :: "x1:Double -> x2:Double -> {v : Double | v == x1 + x2}"
96:37-96:38::lq_anf__d2rG :: "Double"
96:41-96:74::_ :: "x1:(List Double) -> {v : (List Double) | size v == size x1} -> {v : (List Double) | size v == size x1}"
96:51-96:52::x :: "Double"
96:53-96:54::y :: "Double"
96:58-96:61::_ :: "Double -> Double"
96:62-96:73::lq_anf__d2rM :: "Double"
96:63-96:64::x :: "{v : Double | v == x}"
96:64-96:65::_ :: "Double -> Integer -> Double"
96:65-96:66::lq_anf__d2rI :: "Integer"
96:67-96:68::_ :: "x1:Double -> x2:Double -> {v : Double | v == x1 - x2}"
96:69-96:70::y :: "{v : Double | v == y}"
96:70-96:71::_ :: "Double -> Integer -> Double"
96:71-96:72::lq_anf__d2rK :: "Integer"
96:75-96:77::px :: "{v : (List Double) | v == px}"
96:78-96:80::py :: "{v : (List Double) | v == py}"
107:1-107:8::nearest :: "x1:{v : Int | v > 0} -> x2:{v : Int | v > 0} -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2}) -> {v : (List Double) | size v == x2} -> {v : Int | 0 <= v && v < x1}"
107:9-107:10::k :: "{v : Int | v > 0}"
107:11-107:12::n :: "{v : Int | v > 0}"
107:13-107:20::centers :: "(Map {v : Int | 0 <= v && v < k} {v : (List Double) | size v == n})"
107:21-107:22::p :: "{v : (List Double) | size v == n}"
107:25-107:34::_ :: "(Map {v : Int | 0 <= v && v < k && v < k && v >= 0} Double) -> {v : Int | 0 <= v && v < k && v < k && v >= 0}"
107:35-107:66::lq_anf__d2rR :: "(Map {v : Int | v >= 0 && v >= 0 && v < k && v < k} Double)"
107:36-107:56::_ :: "(Map {v : Int | v >= 0 && v >= 0 && v < k && v < k} {v : (List Double) | size v == n}) -> (Map {v : Int | v >= 0 && v >= 0 && v < k && v < k} Double)"
107:42-107:56::lq_anf__d2rQ :: "{v : (List Double) | size v == n} -> Double"
107:43-107:51::_ :: "x1:{v : Int | v > 0} -> {v : (List Double) | size v == x1} -> {v : (List Double) | size v == x1} -> Double"
107:52-107:53::n :: "{v : Int | v == n}"
107:54-107:55::p :: "{v : (List Double) | v == p}"
107:58-107:65::centers :: "{v : (Map {v : Int | 0 <= v && v < k} {v : (List Double) | size v == n}) | v == centers}"
117:1-117:10::minKeyMap :: "(Ord b) => (Map a b) -> a"
117:14-117:24::lq_anf__d2rC :: "{v : [(a, b)] | len v >= 0} -> a"
117:27-117:35::_ :: "(Map a b) -> [(a, b)]"
120:1-120:11::minKeyList :: "(Ord b) => {VV : [(a, b)] | len VV >= 0} -> a"
120:12-120:14::xs :: "{VV : [(a, b)] | len VV >= 0}"
120:17-120:20::_ :: "(a, b) -> a"
120:23-120:32::_ :: "((a, b) -> (a, b) -> Ordering) -> [(a, b)] -> (a, b)"
120:35-120:37::x1 :: "(a, b)"
120:38-120:40::x2 :: "(a, b)"
120:44-120:51::_ :: "x1:a -> x2:a -> {v : Ordering | (v == GHC.Types.EQ <=> x1 == x2) && (v == GHC.Types.LT <=> x1 < x2) && (v == GHC.Types.GT <=> x1 > x2)}"
120:52-120:60::lq_anf__d2ry :: "a"
120:57-120:59::x1 :: "{v : (a, b) | v == x1}"
120:61-120:69::lq_anf__d2rz :: "a"
120:66-120:68::x2 :: "(a, b)"
120:71-120:73::xs :: "{v : [(a, b)] | v == xs}"
129:1-129:13::test_nearest :: "{VV : Int | VV >= 0 && VV >= 0}"
129:16-129:23::_ :: "x1:{v : Int | v > 0} -> x2:{v : Int | v > 0} -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2}) -> {v : (List Double) | size v == x2} -> {v : Int | 0 <= v && v < x1}"
129:24-129:25::lq_anf__d2s8 :: "Int"
129:26-129:27::lq_anf__d2s9 :: "Int"
129:28-129:68::lq_anf__d2sk :: "(Map {v : Int | 0 <= v && v >= 0} (List Double))"
129:29-129:39::_ :: "[({v : Int | 0 <= v && v >= 0}, (List Double))] -> (Map {v : Int | 0 <= v && v >= 0} (List Double))"
129:40-129:67::lq_anf__d2sj :: "[({v : Int | v >= 0 && v >= 0 && v == fst x18}, {v : (List Double) | v == snd x18})]"
129:41-129:48::lq_anf__d2sb :: "({v : Int | 0 <= v && v == 0}, {v : (List Double) | v == p0})"
129:42-129:43::lq_anf__d2sa :: "Int"
129:45-129:47::p0 :: "{v : (List Double) | v == p0}"
129:50-129:57::lq_anf__d2sd :: "({v : Int | v > 0 && v == 1}, {v : (List Double) | v == p1})"
129:51-129:52::lq_anf__d2sc :: "Int"
129:54-129:56::p1 :: "{v : (List Double) | v == p1}"
129:59-129:66::lq_anf__d2sf :: "({v : Int | v > 0 && v > 0}, {v : (List Double) | v == p2})"
129:60-129:61::lq_anf__d2se :: "Int"
129:63-129:65::p2 :: "{v : (List Double) | v == p2}"
129:69-129:70::p :: "{v : (List Double) | v == p}"
132:5-132:7::p0 :: "(List Double)"
132:10-132:17::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
132:14-132:17::lq_anf__d2s4 :: "Double"
132:18-132:33::lq_anf__d2s7 :: "(List Double)"
132:19-132:26::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
132:23-132:26::lq_anf__d2s5 :: "Double"
132:27-132:32::_ :: "{v : (List a) | size v == 0}"
133:5-133:7::p1 :: "(List Double)"
133:10-133:17::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
133:14-133:17::lq_anf__d2s0 :: "Double"
133:18-133:33::lq_anf__d2s3 :: "(List Double)"
133:19-133:26::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
133:23-133:26::lq_anf__d2s1 :: "Double"
133:27-133:32::_ :: "{v : (List a) | size v == 0}"
134:5-134:7::p2 :: "(List Double)"
134:10-134:17::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
134:14-134:17::lq_anf__d2rW :: "Double"
134:18-134:33::lq_anf__d2rZ :: "(List Double)"
134:19-134:26::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
134:23-134:26::lq_anf__d2rX :: "Double"
134:27-134:32::_ :: "{v : (List a) | size v == 0}"
135:5-135:6::p :: "(List Double)"
135:10-135:17::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
135:14-135:17::lq_anf__d2rS :: "Double"
135:18-135:33::lq_anf__d2rV :: "(List Double)"
135:19-135:26::_ :: "x1:(List Double) -> {v : (List Double) | size v == 1 + size x1}"
135:23-135:26::lq_anf__d2rT :: "Double"
135:27-135:32::_ :: "{v : (List a) | size v == 0}"
152:1-152:13::mergeCluster :: "x1:{v : Int | v >= 0} -> ({v : Int | v > 0}, {v : (List Double) | size v == x1}) -> ({v : Int | v > 0}, {v : (List Double) | size v == x1}) -> ({v : Int | v > 0}, {v : (List Double) | size v == x1})"
152:14-152:15::n :: "{v : Int | v >= 0}"
152:36-152:64::(,) :: "x1:a -> x2:{VV : b | true} -> {v : (a, b) | clusterDimension v == size x2 && snd v == x2 && fst v == x1 && x_Tuple22 v == x2 && x_Tuple21 v == x1}"
152:37-152:39::n1 :: "{v : Int | v == n1}"
152:40-152:41::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
152:42-152:44::n2 :: "{v : Int | v == n2}"
152:46-152:57::_ :: "x1:(List Double) -> {v : (List Double) | size v == size x1} -> {v : (List Double) | size v == size x1}"
152:54-152:57::lq_anf__d2so :: "x1:Double -> x2:Double -> {v : Double | v == x1 + x2}"
152:58-152:60::p1 :: "{v : (List Double) | v == p1}"
152:61-152:63::p2 :: "{v : (List Double) | v == p2}"
170:1-170:9::centroid :: "x1:{v : Int | v >= 0} -> {v : (List Double) | size v == x1} -> {v : Int | v > 0} -> {v : (List Double) | size v == x1}"
170:10-170:11::n :: "{v : Int | v >= 0}"
170:12-170:13::p :: "{v : (List Double) | size v == n}"
170:14-170:16::sz :: "{v : Int | v > 0}"
170:19-170:44::_ :: "x1:(List Double) -> {v : (List Double) | size v == size x1}"
170:25-170:26::x :: "Double"
170:30-170:31::x :: "{v : Double | v == x}"
170:32-170:40::_ :: "Double -> {v : Int | v /= 0} -> Double"
170:41-170:43::sz :: "{v : Int | v == sz}"
170:45-170:46::p :: "{v : (List Double) | v == p}"
188:1-188:7::kmeans :: "{v : Int | v > 0} -> x2:{v : Int | v > 0} -> x3:{v : Int | v > 0} -> (List {v : (List Double) | size v == x3}) -> (Map {v : Int | 0 <= v && v < x2} {v : (List Double) | size v == x3}) -> (Map {v : Int | 0 <= v && v < x2} {v : (List Double) | size v == x3})"
188:8-188:13::steps :: "{v : Int | v > 0}"
188:14-188:15::k :: "{v : Int | v > 0}"
188:16-188:17::n :: "{v : Int | v > 0}"
188:18-188:20::ps :: "(List {v : (List Double) | size v == n})"
188:23-188:35::repeat :: "{VV : Int | 0 <= VV && VV >= 0} -> (a -> a) -> a -> a"
188:30-188:35::steps :: "{v : Int | v == steps}"
188:36-188:52::lq_anf__d2sB :: "(Map {v : Int | 0 <= v && v < k} {v : (List Double) | size v == n}) -> (Map {v : Int | 0 <= v && v < k} {v : (List Double) | size v == n})"
188:37-188:44::_ :: "x1:{v : Int | v > 0} -> x2:{v : Int | v > 0} -> (List {v : (List Double) | size v == x2}) -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2}) -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2})"
188:45-188:46::k :: "{v : Int | v == k}"
188:47-188:48::n :: "{v : Int | v == n}"
188:49-188:51::ps :: "{v : (List {v : (List Double) | size v == n}) | v == ps}"
191:1-191:7::repeat :: "{VV : Int | 0 <= VV && VV >= 0} -> (a -> a) -> a -> a"
191:10-191:11::f :: "a -> a"
191:12-191:13::x :: "a"
191:16-191:17::x :: "{VV : a | VV == x}"
192:16-192:28::repeat :: "{VV : Int | 0 <= VV && VV >= 0} -> (a -> a) -> a -> a"
192:23-192:28::lq_anf__d2sz :: "Int"
192:24-192:25::ds_d2rp :: "Int"
192:25-192:26::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
192:26-192:27::lq_anf__d2sy :: "Int"
192:29-192:30::f :: "a -> a"
192:31-192:36::lq_anf__d2sA :: "a"
192:32-192:33::_ :: "a -> a"
192:34-192:35::x :: "{VV : a | VV == x}"
208:1-208:8::kmeans1 :: "x1:{v : Int | v > 0} -> x2:{v : Int | v > 0} -> (List {v : (List Double) | size v == x2}) -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2}) -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2})"
208:9-208:10::k :: "{v : Int | v > 0}"
208:11-208:12::n :: "{v : Int | v > 0}"
208:13-208:15::ps :: "(List {v : (List Double) | size v == n})"
208:16-208:18::cs :: "(Map {v : Int | 0 <= v && v < k} {v : (List Double) | size v == n})"
208:21-208:42::normalize :: "(Map a ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n})) -> (Map a {v : (List Double) | size v == n})"
208:31-208:42::newClusters :: "{v : (Map {v : Int | 0 <= v && v < k && v < k && v >= 0} ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n})) | v == newClusters}"
211:5-211:14::normalize :: "(Map a ({VV : Int | VV > 0 && VV > 0}, {VV : (List Double) | size VV == n})) -> (Map a {VV : (List Double) | size VV == n})"
211:21-211:56::lq_anf__d2sv :: "({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) -> {v : (List Double) | size v == n}"
211:27-211:56::_ :: "{VV : (List Double) | size VV == n}"
211:40-211:48::_ :: "x1:{v : Int | v >= 0} -> {v : (List Double) | size v == x1} -> {v : Int | v > 0} -> {v : (List Double) | size v == x1}"
211:49-211:50::n :: "{v : Int | v == n}"
211:51-211:52::p :: "{v : (List Double) | v == p}"
211:53-211:55::sz :: "{v : Int | v == sz}"
212:5-212:16::newClusters :: "(Map {v : Int | 0 <= v && v < k && v < k && v >= 0} ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}))"
212:21-212:30::_ :: "({v : (List Double) | size v == n} -> (List ({v : Int | 0 <= v && v < k && v < k && v >= 0}, ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n})))) -> (({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) -> ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) -> ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n})) -> (List {v : (List Double) | size v == n}) -> (Map {v : Int | 0 <= v && v < k && v < k && v >= 0} ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}))"
212:31-212:33::fm :: "x1:{v : (List Double) | size v == n} -> (List ({v : Int | 0 <= v && v < k && v < k && v >= 0 && v == fst x20}, {v : ({v : Int | v <= k && v <= n && v > 0 && v == fst x36 && v == 1}, {v : (List Double) | size v == n && v == x1 && v == snd x36}) | v == snd x20}))"
212:34-212:36::fr :: "({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) -> ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) -> ({v : Int | v > 0}, {v : (List Double) | size v == n})"
212:37-212:39::ps :: "{v : (List {v : (List Double) | size v == n}) | v == ps}"
213:5-213:7::fm :: "p:{VV : (List Double) | size VV == n} -> (List ({VV : Int | 0 <= VV && VV < k && VV < k && VV >= 0 && VV == fst VV}, {VV : ({VV : Int | VV <= k && VV <= n && VV > 0 && VV == fst VV && VV == 1}, {VV : (List Double) | size VV == n && VV == p && VV == snd VV}) | VV == snd VV}))"
213:8-213:9::p :: "{VV : (List Double) | size VV == n}"
213:21-213:64::singleton :: "a -> {v : (List a) | size v == 1}"
213:31-213:64::lq_anf__d2st :: "({v : Int | 0 <= v && v < k && v < k && v >= 0}, ({v : Int | v == fst x27 && v <= k && v <= n && v > 0 && v == 1}, {v : (List Double) | v == snd x27 && size v == n && v == p}))"
213:32-213:39::_ :: "x1:{v : Int | v > 0} -> x2:{v : Int | v > 0} -> (Map {v : Int | 0 <= v && v < x1} {v : (List Double) | size v == x2}) -> {v : (List Double) | size v == x2} -> {v : Int | 0 <= v && v < x1}"
213:40-213:41::k :: "{v : Int | v == k}"
213:42-213:43::n :: "{v : Int | v == n}"
213:44-213:46::cs :: "{v : (Map {v : Int | 0 <= v && v < k} {v : (List Double) | size v == n}) | v == cs}"
213:47-213:48::p :: "{v : (List Double) | v == p}"
213:50-213:63::lq_anf__d2ss :: "({v : Int | v <= k && v <= n && v > 0 && v == 1}, {v : (List Double) | size v == n && v == p})"
213:51-213:59::lq_anf__d2sr :: "Int"
213:61-213:62::p :: "{v : (List Double) | v == p}"
214:5-214:7::fr :: "({VV : Int | VV > 0 && VV > 0}, {VV : (List Double) | size VV == n}) -> ({VV : Int | VV > 0 && VV > 0}, {VV : (List Double) | size VV == n}) -> ({v : Int | v > 0}, {v : (List Double) | size v == n})"
214:8-214:11::wp1 :: "({VV : Int | VV > 0 && VV > 0}, {VV : (List Double) | size VV == n})"
214:12-214:15::wp2 :: "({VV : Int | VV > 0 && VV > 0}, {VV : (List Double) | size VV == n})"
214:21-214:33::_ :: "x1:{v : Int | v >= 0} -> ({v : Int | v > 0}, {v : (List Double) | size v == x1}) -> ({v : Int | v > 0}, {v : (List Double) | size v == x1}) -> ({v : Int | v > 0}, {v : (List Double) | size v == x1})"
214:34-214:35::n :: "{v : Int | v == n}"
214:36-214:39::wp1 :: "{v : ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) | v == wp1}"
214:40-214:43::wp2 :: "{v : ({v : Int | v > 0 && v > 0}, {v : (List Double) | size v == n}) | v == wp2}"