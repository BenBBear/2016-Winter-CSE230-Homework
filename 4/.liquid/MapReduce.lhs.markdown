Map-Reduce
==========


<pre><span class=hs-linenum>5: </span><span class='hs-keyword'>module</span> <span class='hs-conid'>MapReduce</span> <span class='hs-layout'>(</span><span class='hs-varid'>mapReduce</span><span class='hs-layout'>)</span> <span class='hs-keyword'>where</span>
<span class=hs-linenum>6: </span>
<span class=hs-linenum>7: </span><span class='hs-keyword'>import</span> <span class='hs-keyword'>qualified</span> <span class='hs-conid'>Data</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-keyword'>as</span> <span class='hs-conid'>M</span>
<span class=hs-linenum>8: </span><span class='hs-keyword'>import</span> <span class='hs-conid'>List</span>
<span class=hs-linenum>9: </span><span class='hs-keyword'>import</span> <span class='hs-conid'>Prelude</span> <span class='hs-varid'>hiding</span> <span class='hs-layout'>(</span><span class='hs-varid'>map</span><span class='hs-layout'>,</span> <span class='hs-varid'>reduce</span><span class='hs-layout'>,</span> <span class='hs-varid'>concat</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldr</span><span class='hs-layout'>,</span> <span class='hs-varid'>foldr1</span><span class='hs-layout'>)</span>
<span class=hs-linenum>10: </span><span class='hs-definition'>expand</span>   <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span>
<span class=hs-linenum>11: </span><span class='hs-definition'>group</span>    <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>List</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span>
<span class=hs-linenum>12: </span><span class='hs-definition'>collapse</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-conid'>List</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span>
</pre>

The following is a super simplified implementation of
[Map-Reduce](http://en.wikipedia.org/wiki/MapReduce)
using the [Lists](List.lhs) and `Data.Map`.


<pre><span class=hs-linenum>20: </span><span class='hs-definition'>mapReduce</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span>
<span class=hs-linenum>21: </span>                     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-layout'>(</span><span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span>
<span class=hs-linenum>22: </span>                     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-varid'>a</span>
<span class=hs-linenum>23: </span>                     <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span>
<span class=hs-linenum>24: </span>
<span class=hs-linenum>25: </span><a class=annot href="#"><span class=annottext>(GHC.Classes.Ord b) =&gt;
(a -&gt; (List.List (b, c))) -&gt; (c -&gt; c -&gt; c) -&gt; (List.List a) -&gt; (Data.Map.Base.Map b c)</span><span class='hs-definition'>mapReduce</span></a> <a class=annot href="#"><span class=annottext>a -&gt; (List.List (b, c))</span><span class='hs-varid'>fm</span></a> <a class=annot href="#"><span class=annottext>a -&gt; a -&gt; a</span><span class='hs-varid'>fr</span></a> <a class=annot href="#"><span class=annottext>(List.List a)</span><span class='hs-varid'>xs</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>{v : (Data.Map.Base.Map a b) | v == kvm}</span><span class='hs-varid'>kvm</span></a>
<span class=hs-linenum>26: </span>  <span class='hs-keyword'>where</span>
<span class=hs-linenum>27: </span>    <a class=annot href="#"><span class=annottext>(List.List (a, b))</span><span class='hs-varid'>kvs</span></a>   <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>(List.List a) -&gt; (List.List (b, c))</span><span class='hs-varid'>expand</span></a>      <a class=annot href="#"><span class=annottext>a -&gt; (List.List (b, c))</span><span class='hs-varid'>fm</span></a> <a class=annot href="#"><span class=annottext>{v : (List.List a) | v == xs}</span><span class='hs-varid'>xs</span></a>     <span class='hs-comment'>-- step 1</span>
<span class=hs-linenum>28: </span>    <a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0})</span><span class='hs-varid'>kvsm</span></a>  <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>(List.List (a, b)) -&gt; (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0})</span><span class='hs-varid'>group</span></a>       <a class=annot href="#"><span class=annottext>{v : (List.List (a, b)) | v == kvs}</span><span class='hs-varid'>kvs</span></a>       <span class='hs-comment'>-- step 2</span>
<span class=hs-linenum>29: </span>    <a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a b)</span><span class='hs-varid'>kvm</span></a>   <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) -&gt; (Data.Map.Base.Map a b)</span><span class='hs-varid'>collapse</span></a> <a class=annot href="#"><span class=annottext>a -&gt; a -&gt; a</span><span class='hs-varid'>fr</span></a> <a class=annot href="#"><span class=annottext>{v : (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) | v == kvsm}</span><span class='hs-varid'>kvsm</span></a>      <span class='hs-comment'>-- step 3</span>
</pre>

**The Problem** If you solved `foldr1` then you should
get a single type error below, in the call to `foldr1`
in `collapse`. Fix the error by **modifying the
refinement type specifications** only (do not modify any code).

**Note:** This problem requires you to have solved the
`foldr1` problem from [List.lhs](List.lhs); otherwise
no points.

Next, we briefly describe and show each step of the
`mapReduce` function.

Step 1: Map Elements into Key-Value Lists
-----------------------------------------


<pre><span class=hs-linenum>48: </span><span class='hs-keyword'>{-@</span> <span class='hs-varid'>expand</span>  <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-varid'>a</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyword'>@-}</span>
<span class=hs-linenum>49: </span><a class=annot href="#"><span class=annottext>(a -&gt; (List.List (b, c))) -&gt; (List.List a) -&gt; (List.List (b, c))</span><span class='hs-definition'>expand</span></a> <a class=annot href="#"><span class=annottext>a -&gt; (List.List (b, c))</span><span class='hs-varid'>f</span></a> <a class=annot href="#"><span class=annottext>(List.List a)</span><span class='hs-varid'>xs</span></a> <span class='hs-keyglyph'>=</span> <span class='hs-varid'>concat</span> <a class=annot href="#"><span class=annottext>(List.List (List.List (a, b)))</span><span class='hs-layout'>(</span></a><a class=annot href="#"><span class=annottext>x1:(List.List a) -&gt; {v : (List.List (List.List (b, c))) | size v == size x1}</span><span class='hs-varid'>map</span></a> <a class=annot href="#"><span class=annottext>a -&gt; (List.List (b, c))</span><span class='hs-varid'>f</span></a> <a class=annot href="#"><span class=annottext>{v : (List.List a) | v == xs}</span><span class='hs-varid'>xs</span></a><span class='hs-layout'>)</span>
</pre>

Step 2: Group By Key
--------------------


<pre><span class=hs-linenum>56: </span><span class='hs-keyword'>{-@</span> <span class='hs-varid'>group</span> <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-conid'>Ord</span> <span class='hs-varid'>k</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>=&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-keyword'>{l:</span><span class='hs-conid'>List</span> <span class='hs-varid'>v</span> <span class='hs-keyword'>| size(l)&gt;0}</span><span class='hs-layout'>)</span> <span class='hs-keyword'>@-}</span>
<span class=hs-linenum>57: </span><a class=annot href="#"><span class=annottext>(GHC.Classes.Ord a) =&gt;
(List.List (a, b)) -&gt; (Data.Map.Base.Map a {l : (List.List b) | size l &gt; 0})</span><span class='hs-definition'>group</span></a>     <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) -&gt; (List.List (a, b)) -&gt; (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0})</span><span class='hs-varid'>foldr</span></a> <a class=annot href="#"><span class=annottext>(a, b) -&gt; (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) -&gt; (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0})</span><span class='hs-varid'>addKV</span></a>  <a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a b)</span><span class='hs-conid'>M</span></a><span class='hs-varop'>.</span><span class='hs-varid'>empty</span>
<span class=hs-linenum>58: </span>
<span class=hs-linenum>59: </span><a class=annot href="#"><span class=annottext>(GHC.Classes.Ord b) =&gt;
(b, a) -&gt; (Data.Map.Base.Map b {VV : (List.List a) | size VV &gt; 0}) -&gt; (Data.Map.Base.Map b {VV : (List.List a) | size VV &gt; 0})</span><span class='hs-definition'>addKV</span></a> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span><span class='hs-varid'>v</span><span class='hs-layout'>)</span> <a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a {VV : (List.List b) | size VV &gt; 0})</span><span class='hs-varid'>m</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>a -&gt; {v : (List.List b) | size v &gt; 0} -&gt; (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) -&gt; (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0})</span><span class='hs-conid'>M</span></a><span class='hs-varop'>.</span><span class='hs-varid'>insert</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == k}</span><span class='hs-varid'>k</span></a> <a class=annot href="#"><span class=annottext>{v : (List.List a) | v == vs'}</span><span class='hs-varid'>vs'</span></a> <a class=annot href="#"><span class=annottext>{v : (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) | v == m}</span><span class='hs-varid'>m</span></a>
<span class=hs-linenum>60: </span>  <span class='hs-keyword'>where</span>
<span class=hs-linenum>61: </span>    <a class=annot href="#"><span class=annottext>(List.List a)</span><span class='hs-varid'>vs'</span></a>       <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>x1:(List.List a) -&gt; {v : (List.List a) | size v == 1 + size x1}</span><span class='hs-varid'>add</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == v}</span><span class='hs-varid'>v</span></a> <a class=annot href="#"><span class=annottext>(List.List a)</span><span class='hs-layout'>(</span></a><a class=annot href="#"><span class=annottext>(List.List a) -&gt; b -&gt; (Data.Map.Base.Map b (List.List a)) -&gt; (List.List a)</span><span class='hs-conid'>M</span></a><span class='hs-varop'>.</span><span class='hs-varid'>findWithDefault</span> <a class=annot href="#"><span class=annottext>{v : (List.List a) | size v == 0}</span><span class='hs-varid'>empty</span></a> <a class=annot href="#"><span class=annottext>{VV : a | VV == k}</span><span class='hs-varid'>k</span></a> <a class=annot href="#"><span class=annottext>{v : (Data.Map.Base.Map a {v : (List.List b) | size v &gt; 0}) | v == m}</span><span class='hs-varid'>m</span></a><span class='hs-layout'>)</span>
</pre>

Step 3: Reduce Each Key to Single Value
---------------------------------------


<pre><span class=hs-linenum>68: </span><span class='hs-keyword'>{-@</span> <span class='hs-varid'>collapse</span>  <span class='hs-keyglyph'>::</span> <span class='hs-layout'>(</span><span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-layout'>(</span><span class='hs-keyword'>{l:</span><span class='hs-conid'>List</span> <span class='hs-varid'>v</span> <span class='hs-keyword'>| size(l)&gt;0}</span><span class='hs-layout'>)</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span> <span class='hs-keyword'>@-}</span>
<span class=hs-linenum>69: </span><a class=annot href="#"><span class=annottext>(a -&gt; a -&gt; a) -&gt; (Data.Map.Base.Map b {l : (List.List a) | size l &gt; 0}) -&gt; (Data.Map.Base.Map b a)</span><span class='hs-definition'>collapse</span></a> <a class=annot href="#"><span class=annottext>a -&gt; a -&gt; a</span><span class='hs-varid'>f</span></a> <span class='hs-keyglyph'>=</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-varid'>map</span> <a class=annot href="#"><span class=annottext>{v : (List.List a) | size v &gt; 0} -&gt; a</span><span class='hs-layout'>(</span></a><span class='hs-varid'>foldr1</span> <a class=annot href="#"><span class=annottext>a -&gt; a -&gt; a</span><span class='hs-varid'>f</span></a><span class='hs-layout'>)</span>
<span class=hs-linenum>70: </span>
<span class=hs-linenum>71: </span><span class='hs-definition'>toList</span> <span class='hs-keyglyph'>::</span> <span class='hs-conid'>M</span><span class='hs-varop'>.</span><span class='hs-conid'>Map</span> <span class='hs-varid'>k</span> <span class='hs-varid'>v</span> <span class='hs-keyglyph'>-&gt;</span> <span class='hs-conid'>List</span> <span class='hs-layout'>(</span><span class='hs-varid'>k</span><span class='hs-layout'>,</span> <span class='hs-varid'>v</span><span class='hs-layout'>)</span>
<span class=hs-linenum>72: </span><a class=annot href="#"><span class=annottext>(Data.Map.Base.Map a b) -&gt; (List.List (a, b))</span><span class='hs-definition'>toList</span></a> <span class='hs-keyglyph'>=</span> <a class=annot href="#"><span class=annottext>(List.List (a, b)) -&gt; (Data.Map.Base.Map a b) -&gt; (List.List (a, b))</span><span class='hs-conid'>M</span></a><span class='hs-varop'>.</span><span class='hs-varid'>foldrWithKey</span> <span class='hs-layout'>(</span><span class='hs-keyglyph'>\</span><a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>k</span></a> <a class=annot href="#"><span class=annottext>a</span><span class='hs-varid'>v</span></a> <a class=annot href="#"><span class=annottext>(List.List (a, b))</span><span class='hs-varid'>acc</span></a> <span class='hs-keyglyph'>-&gt;</span> <a class=annot href="#"><span class=annottext>x1:(List.List (a, b)) -&gt; {v : (List.List (a, b)) | size v == 1 + size x1}</span><span class='hs-varid'>add</span></a> <a class=annot href="#"><span class=annottext>(a, b)</span><span class='hs-layout'>(</span></a><a class=annot href="#"><span class=annottext>{VV : a | VV == k}</span><span class='hs-varid'>k</span></a><span class='hs-layout'>,</span> <a class=annot href="#"><span class=annottext>{VV : a | VV == v}</span><span class='hs-varid'>v</span></a><span class='hs-layout'>)</span> <a class=annot href="#"><span class=annottext>{v : (List.List (a, b)) | v == acc}</span><span class='hs-varid'>acc</span></a><span class='hs-layout'>)</span> <a class=annot href="#"><span class=annottext>{v : (List.List a) | size v == 0}</span><span class='hs-varid'>empty</span></a>
</pre>

