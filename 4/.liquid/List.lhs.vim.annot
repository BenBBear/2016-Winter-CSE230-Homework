1:1-1:1::$con2tag_rVm :: "(List a) -> Int#"
55:25-55:27::$fEqList :: "(Eq a) => (Eq (List a))"
55:29-55:32::$fOrdList :: "(Eq (List a), Ord a) => (Ord (List a))"
55:34-55:38::$fShowList :: "(Show a) => (Show (List a))"
93:1-93:7::length :: "x1:(List a) -> {v : Int | v == size x1}"
93:21-93:22::I# :: "x1:Int# -> {v : Int | v == (x1 : int)}"
94:21-94:22::lq_anf__d1HS :: "Int"
94:23-94:24::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
94:25-94:34::lq_anf__d1HT :: "Int"
94:32-94:34::xs :: "{v : (List a) | v == xs}"
102:1-102:10::prop_size :: "{v : Bool | Prop v}"
102:14-102:21::_ :: "{v : Bool | Prop v} -> {v : Bool | Prop v}"
102:22-102:38::lq_anf__d1HW :: "Bool"
102:23-102:32::lq_anf__d1HU :: "Int"
102:30-102:32::l3 :: "{v : (List Int) | v == List.l3}"
102:33-102:35::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
102:36-102:37::lq_anf__d1HV :: "Int"
105:1-105:3::l3 :: "{v : (List Int) | size v == 3}"
105:10-105:11::lq_anf__d1HQ :: "Int"
105:16-105:18::l2 :: "{v : (List Int) | v == List.l2}"
108:1-108:3::l2 :: "{v : (List Int) | size v == 2}"
108:10-108:11::lq_anf__d1HP :: "Int"
108:16-108:18::l1 :: "{v : (List Int) | v == List.l1}"
111:1-111:3::l1 :: "{v : (List Int) | size v == 1}"
111:10-111:11::lq_anf__d1HO :: "Int"
111:16-111:18::l0 :: "{v : (List Int) | v == List.l0}"
114:1-114:3::l0 :: "{v : (List Int) | size v == 0}"
126:1-126:6::empty :: "{v : (List a) | size v == 0}"
129:1-129:4::add :: "a -> x2:(List a) -> {v : (List a) | size v == 1 + size x2}"
129:5-129:6::x :: "a"
129:7-129:9::xs :: "(List a)"
129:12-129:13::x :: "{VV : a | VV == x}"
129:18-129:20::xs :: "{v : (List a) | v == xs}"
132:1-132:10::singleton :: "a -> {v : (List a) | size v == 1}"
132:11-132:12::x :: "a"
132:15-132:20::_ :: "x1:(List a) -> {v : (List a) | size v == 1 + size x1}"
132:19-132:20::x :: "{VV : a | VV == x}"
132:21-132:24::_ :: "{v : (List a) | allSize v == 0 && size v == 0}"
144:1-144:10::replicate :: "x1:Int -> a -> {v : (List a) | size v == x1}"
144:12-144:13::n :: "Int"
144:14-144:15::a :: "a"
144:18-144:23::_ :: "x1:(List a) -> {v : (List a) | size v == 1 + size x1}"
144:22-144:23::a :: "{VV : a | VV == a}"
144:24-144:43::lq_anf__d1HN :: "(List a)"
144:25-144:40::replicate :: "x1:Int -> a -> {v : (List a) | size v == x1}"
144:35-144:40::lq_anf__d1HM :: "Int"
144:36-144:37::n :: "{v : Int | v == n}"
144:37-144:38::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
144:38-144:39::lq_anf__d1HL :: "Int"
144:41-144:42::a :: "{VV : a | VV == a}"
151:1-151:15::prop_replicate :: "{v : Int | v >= 0} -> a -> {v : Bool | Prop v}"
151:16-151:17::n :: "{v : Int | v >= 0}"
151:18-151:19::x :: "a"
151:22-151:29::_ :: "{v : Bool | Prop v} -> {v : Bool | Prop v}"
151:30-151:59::lq_anf__d1HZ :: "Bool"
151:31-151:32::n :: "{v : Int | v == n}"
151:33-151:35::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
151:36-151:58::lq_anf__d1HY :: "Int"
151:43-151:58::lq_anf__d1HX :: "(List a)"
151:44-151:55::replicate :: "x1:Int -> a -> {v : (List a) | size v == x1}"
151:54-151:55::n :: "{v : Int | v == n}"
151:56-151:57::x :: "{VV : a | VV == x}"
162:1-162:4::map :: "(a -> b) -> x3:(List a) -> {v : (List b) | size v == size x3}"
162:5-162:6::f :: "a -> b"
162:20-162:23::_ :: "{v : (List a) | allSize v == 0 && size v == 0}"
163:20-163:21::_ :: "a -> b"
163:22-163:23::x :: "{VV : a | VV == x}"
163:28-163:33::map :: "(a -> b) -> x3:(List a) -> {v : (List b) | size v == size x3}"
163:32-163:33::f :: "a -> b"
163:34-163:36::xs :: "{v : (List a) | v == xs}"
166:1-166:9::prop_map :: "(b -> a) -> (List b) -> {v : Bool | Prop v}"
166:10-166:11::f :: "a -> b"
166:12-166:14::xs :: "(List a)"
166:17-166:24::_ :: "{v : Bool | Prop v} -> {v : Bool | Prop v}"
166:25-166:57::lq_anf__d1I3 :: "Bool"
166:26-166:35::lq_anf__d1I0 :: "Int"
166:33-166:35::xs :: "{v : (List a) | v == xs}"
166:36-166:38::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
166:39-166:56::lq_anf__d1I2 :: "Int"
166:46-166:56::lq_anf__d1I1 :: "(List a)"
166:47-166:52::map :: "(a -> b) -> x3:(List a) -> {v : (List b) | size v == size x3}"
166:51-166:52::f :: "a -> b"
166:53-166:55::xs :: "{v : (List a) | v == xs}"
177:1-177:7::foldr1 :: "(a -> a -> a) -> {v : (List a) | size v > 0} -> a"
177:8-177:10::op :: "a -> a -> a"
177:24-177:32::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
177:30-177:32::op :: "a -> a -> a"
177:33-177:34::x :: "{VV : a | VV == x}"
177:35-177:37::xs :: "{v : (List a) | v == xs}"
178:24-178:64::die :: "{v : [Char] | false} -> a"
178:28-178:64::lq_anf__d1HG :: "[Char]"
182:1-182:6::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
182:10-182:11::b :: "a"
182:25-182:26::b :: "{VV : a | VV == b}"
183:25-183:26::x :: "{VV : a | VV == x}"
183:27-183:31::_ :: "a -> b -> b"
183:32-183:47::lq_anf__d1HD :: "a"
183:33-183:41::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
183:39-183:41::ds_d1Gd :: "a -> b -> b"
183:42-183:43::b :: "{VV : a | VV == b}"
183:44-183:46::xs :: "{v : (List a) | v == xs}"
196:1-196:8::zipWith :: "(a -> b -> c) -> x4:(List a) -> {v : (List b) | size v == size x4} -> {v : (List c) | size v == size x4}"
196:35-196:38::_ :: "{v : (List a) | allSize v == 0 && size v == 0}"
197:35-197:36::_ :: "a -> b -> c"
197:37-197:38::x :: "{VV : a | VV == x}"
197:39-197:40::y :: "{VV : a | VV == y}"
197:45-197:54::zipWith :: "(a -> b -> c) -> x4:(List a) -> {v : (List b) | size v == size x4} -> {v : (List c) | size v == size x4}"
197:53-197:54::ds_d1G8 :: "a -> b -> c"
197:55-197:57::xs :: "{v : (List a) | v == xs}"
197:58-197:60::ys :: "{v : (List a) | v == ys}"
198:35-198:61::die :: "{v : [Char] | false} -> a"
198:40-198:61::lq_anf__d1Hz :: "[Char]"
201:1-201:13::prop_zipWith :: "(Num a) => (List a) -> {v : Bool | Prop v}"
201:14-201:16::xs :: "(List a)"
201:19-201:26::_ :: "{v : Bool | Prop v} -> {v : Bool | Prop v}"
201:27-201:52::lq_anf__d1I7 :: "Bool"
201:28-201:37::lq_anf__d1I5 :: "Int"
201:35-201:37::xs :: "{v : (List a) | v == xs}"
201:38-201:40::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
201:41-201:51::lq_anf__d1I6 :: "Int"
201:48-201:51::x2s :: "{v : (List a) | v == x2s}"
203:5-203:8::x2s :: "{v : (List a) | size v == size xs}"
203:19-203:30::zipWith :: "(a -> b -> c) -> x4:(List a) -> {v : (List b) | size v == size x4} -> {v : (List c) | size v == size x4}"
203:27-203:30::lq_anf__d1I4 :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
203:31-203:33::xs :: "{v : (List a) | v == xs}"
203:34-203:36::xs :: "{v : (List a) | v == xs}"
227:1-227:8::concat' :: "x1:(List a) -> x2:(List a) -> {v : (List a) | size v == size x1 + size x2}"
227:19-227:22::_ :: "{v : (List a) | allSize v == 0 && size v == 0}"
228:18-228:20::_ :: "(List a)"
229:18-229:20::ds_d1FX :: "(List a)"
230:25-230:32::concat' :: "x1:(List a) -> x2:(List a) -> {v : (List a) | size v == size x1 + size x2}"
230:33-230:35::xs :: "{v : (List a) | v == xs}"
230:37-230:47::lq_anf__d1Hh :: "(List a)"
230:38-230:39::x :: "{VV : a | VV == x}"
230:44-230:46::ds_d1FY :: "(List a)"
236:1-236:7::concat :: "x1:(List (List a)) -> {v : (List a) | size v == allSize x1}"
236:14-236:17::_ :: "{v : (List a) | allSize v == 0 && size v == 0}"
237:21-237:30::concat' :: "x1:(List a) -> x2:(List a) -> {v : (List a) | size v == size x1 + size x2}"
237:29-237:30::x :: "{v : (List a) | v == x}"
237:31-237:42::lq_anf__d1Hq :: "(List a)"
237:39-237:41::xs :: "{v : (List (List a)) | v == xs}"
239:1-239:12::prop_concat :: "Bool"
239:15-239:22::_ :: "{v : Bool | Prop v} -> {v : Bool | Prop v}"
239:23-239:49::lq_anf__d1If :: "Bool"
239:24-239:43::lq_anf__d1Id :: "Int"
239:31-239:43::lq_anf__d1Ic :: "(List Int)"
239:39-239:42::xss :: "{v : (List (List Int)) | v == xss}"
239:44-239:46::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
239:47-239:48::lq_anf__d1Ie :: "Int"
241:5-241:8::xss :: "(List (List Int))"
241:15-241:17::l0 :: "{v : (List Int) | v == List.l0}"
241:22-241:24::l1 :: "{v : (List Int) | v == List.l1}"
241:29-241:31::l2 :: "{v : (List Int) | v == List.l2}"
241:36-241:38::l3 :: "{v : (List Int) | v == List.l3}"
241:43-241:46::_ :: "{v : (List a) | allSize v == 0 && size v == 0}"